!function(){"use strict";const e=1607448959872,t=`cache${e}`,s=["/client/client.2d0a8ffd.js","/client/inject_styles.5607aec6.js","/client/index.cf0133a7.js","/client/TrackMiniPlayer.daea140d.js","/client/music.5f8e435f.js","/client/index.877143a0.js","/client/[slug].32f12821.js","/client/dev.4d2023af.js"].concat(["/service-worker-index.html","/arrow_left.svg","/arrow_right.svg","/designs/modos_1.png","/designs/modos_2.png","/designs/modos_3.png","/designs/musicplayer.png","/designs/musicplayer_2.png","/designs/nlp_1.png","/designs/nlp_2.png","/designs/peek_1.png","/designs/peek_2.png","/designs/peek_3.png","/email.svg","/favicon.svg","/fonts/IBMPlex/IBMPlexMono-Bold.ttf","/fonts/IBMPlex/IBMPlexMono-Regular.ttf","/fonts/Lack/Lack-Regular.otf","/fonts/Nunito/Nunito-Bold.ttf","/fonts/Nunito/Nunito-Regular.ttf","/fonts/Nunito/Nunito-SemiBold.ttf","/fonts/Snake/Snake.ttf","/fonts/Zilla_Slab/OFL.txt","/fonts/Zilla_Slab/ZillaSlab-Bold.ttf","/fonts/Zilla_Slab/ZillaSlab-Regular.ttf","/fonts/Zilla_Slab/ZillaSlab-SemiBold.ttf","/github.svg","/global.css","/logo-192.png","/logo-512.png","/logo.svg","/manifest.json","/music/pianosphere/MVIMG_20200421_194344.jpg","/music/pianosphere/MVIMG_20200504_151957.jpg","/music/pianosphere/MVIMG_20200509_141820.jpg","/music/pianosphere/MVIMG_20200510_171435.jpg","/soundcloud.svg"]),n=new Set(s);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const s of e)s!==t&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const s=new URL(t.request.url),a=s.protocol.startsWith("http"),i=s.hostname===self.location.hostname&&s.port!==self.location.port,o=s.host===self.location.host&&n.has(s.pathname),l="only-if-cached"===t.request.cache&&!o;!a||i||l||t.respondWith((async()=>o&&await caches.match(t.request)||async function(t){const s=await caches.open(`offline${e}`);try{const e=await fetch(t);return s.put(t,e.clone()),e}catch(e){const n=await s.match(t);if(n)return n;throw e}}(t.request))())}))}();
